dplyr::select(matches("E_R_C"))
# Calculate E_h
E_h <- - price - demand_friction - E_oop - E_R_s * E_R_C * price
E_h <- E_h %>%
dplyr::rename_with(\(x) str_replace(x, "price", "E_h"),
starts_with("price"))
# Calculate v
## Note that now we ignore the second term of v and thus v = E_h
v <- E_h  %>%
dplyr::rename_with(\(x) str_replace(x, "E_h", "v"),
starts_with("E_h"))
## Calculate Choice Probability
choice_probability <- df %>%
dplyr::bind_cols(v) %>%
dplyr::group_by(i, t) %>%
dplyr::mutate_at(vars(starts_with("v")),
funs(exp(.) / sum(exp(.)))) %>%
dplyr::ungroup() %>%
dplyr::rename_with(\(x) str_replace(x, "v", "choice_probability"),
starts_with("v"))
output <- choice_probability
return(output)
}
## Simulated Log-likelihood
SLL <- function(df, theta, cost_par, lambda){
SLL <- gen_choice_probability(df, theta, cost_par, lambda) %>%
dplyr::mutate_at(vars(starts_with("choice_probability")),
funs(choice * log(.))) %>%
dplyr::summarise_at(vars(starts_with("choice_probability")),
funs(sum(.)))
output <- as.matrix(SLL) %>%
apply(1, mean)
output <- (-1) * output
print(output)
return(output)
}
# Generate lambda
R <- 50
lambda <- gen_lambda(df, cost_par, R)
# Optimization
res <- optim(par = theta,
fn = SLL,
method = "Nelder-Mead",
df = df,
cost_par = cost_par,
R = R)
# Generate lambda
R <- 50
lambda <- gen_lambda(df, cost_par, R)
# Optimization
res <- optim(par = theta,
fn = SLL,
method = "Nelder-Mead",
df = df,
cost_par = cost_par,
lambda = lambda)
theta_est <- res$par
table <- cbind(theta, theta_est)
colnames(table) <- c("true", "estimates")
table
x0 <- rep(0, length(theta))
x0 <- rep(1, length(theta))
SLL(df, x0, cost_par, lambda)
help(optimi)
help(optim)
# Generate lambda
R <- 50
lambda <- gen_lambda(df, cost_par, R)
# Optimization
SLL(df, x0, cost_par, lambda)
## Initial Value
x0 <- rep(1, length(theta))
res <- optim(par = x0,
fn = SLL,
method = "Nelder-Mead",
df = df,
cost_par = cost_par,
lambda = lambda)
# Generate lambda
R <- 50
lambda <- gen_lambda(df, cost_par, R)
## Initial Value
x0 <- rep(1, length(theta))
## Optimization
res <- optim(par = x0,
fn = SLL,
method = "Nelder-Mead",
df = df,
cost_par = cost_par,
lambda = lambda)
cost_par <- rep(0, 7)
cost_par[1:6] <- theta_lambda
cost_par[7] <- sigma_lambda
cost_par[8:11] <- theta_score
cost_par[12] <- sigma_score
cost_par[13] <- l0
cost_par[14] <- a_l
theta <- rep(0, 6)
theta[1:4] <- eta_f
theta[5:6] <- xi
theta[7:9] <- alpha_m0
theta[10:13] <- alpha_m1
theta[14] <- beta
## Generate Lambda
gen_lambda <- function(df, cost_par, R){
# Parameters
theta_lambda <- cost_par[1:6]
sigma_lambda <- cost_par[7]
# Generate mu_lambda
output <- df %>%
dplyr::mutate(mu_lambda = theta_lambda[1]
+ theta_lambda[2]*x_1 + theta_lambda[3]*x_2
+ theta_lambda[4]*x_3 + theta_lambda[5]*x_4
+ theta_lambda[6]*ifelse(m == 1 & t == 0, 1, 0))
# Generate epsilon_lambda (draw R times)
epsilon_lambda <- matrix(rnorm(N * R, 0, sigma_lambda), nrow = N)
colnames(epsilon_lambda) <- c(paste("lambda", 1:R, sep = "_"))
epsilon_lambda <- data.frame(expand_grid(i = 1:N), epsilon_lambda) %>%
tibble::as_tibble()
## lambda
output <- output %>%
dplyr::left_join(epsilon_lambda, by = c("i")) %>%
dplyr::mutate_at(.vars = vars(starts_with("lambda")),
.funs = ~ exp(mu_lambda + .)) %>%
dplyr::select(-mu_lambda)
return(output)
}
# Generate Choice Probability
gen_choice_probability <- function(df, theta, cost_par, lambda){
# Parameters
eta_f <- theta[1:4]
xi <- theta[5:6]
alpha_m0 <- theta[7:9]
alpha_m1 <- theta[10:13]
beta <- theta[14]
# Cost Parameters
theta_score <- cost_par[8:11]
sigma_score <- cost_par[12]
l0 <- cost_par[13]
a_l <- cost_par[14]
## Lambda
lambda <- lambda
# Price
price <- df$price * matrix(rep(1, dim(df)[1] * R), nrow = dim(df)[1])
colnames(price) <- c(paste("price", 1:R, sep = "_"))
price <- data.frame(price) %>%
tibble::as_tibble()
# Generate Demand Friction
demand_friction <- lambda %>%
dplyr::mutate_at(vars(starts_with("lambda")),
funs(ifelse(d == prior_firm,
0,
eta_f[1] + eta_f[2]*x_1 + eta_f[3]*x_2 + eta_f[4]*x_3)
+ ifelse(d == 1 & t == 0,
xi[1] + xi[2]*log(.),
0))) %>%
dplyr::rename_with(\(x) str_replace(x, "lambda", "demand_friction"),
starts_with("lambda")) %>%
dplyr::select(matches("demand_friction"))
# Generate E_score
E_score <- lambda %>%
dplyr::mutate_at(vars(starts_with("lambda")),
funs(ifelse(t == 0 & m == 1,
exp(theta_score[1] + theta_score[2]*log(.)
+ theta_score[3]*x_1 + theta_score[4]*x_2
+ sigma_score^2 / 2),
0))) %>%
dplyr::rename_with(\(x) str_replace(x, "lambda", "E_score"),
starts_with("lambda"))
# Generate E_oop
E_oop <- lambda %>%
dplyr::mutate_at(vars(starts_with("lambda")),
funs(.*exp(-.)*(l0^(a_l)/(a_l - 1))*policy_limit^(-a_l + 1))) %>%
dplyr::rename_with(\(x) str_replace(x, "lambda", "E_oop"),
starts_with("lambda")) %>%
dplyr::select(matches("E_oop"))
# Generate E_R_s
E_R_s <- E_score %>%
dplyr::mutate_at(vars(starts_with("E_score")),
funs(ifelse(t == 0 & m == 1,
(alpha_m1[1] + alpha_m1[2]*x_1 + alpha_m1[3]*x_2 + alpha_m1[4]*.) / beta,
(alpha_m0[1] + alpha_m0[2]*x_1 + alpha_m0[3]*x_2) / beta))) %>%
dplyr::rename_with(\(x) str_replace(x, "E_score", "E_R_s"),
starts_with("E_score")) %>%
dplyr::select(matches("E_R_s"))
# Generate E_R_C
E_R_C <- lambda %>%
dplyr::mutate_at(vars(starts_with("lambda")),
funs(0.98 * exp(-.) + 1.2 * (1 - exp(-.)))) %>%
dplyr::rename_with(\(x) str_replace(x, "lambda", "E_R_C"),
starts_with("lambda")) %>%
dplyr::select(matches("E_R_C"))
# Calculate E_h
E_h <- - price - demand_friction - E_oop - E_R_s * E_R_C * price
E_h <- E_h %>%
dplyr::rename_with(\(x) str_replace(x, "price", "E_h"),
starts_with("price"))
# Calculate v
## Note that now we ignore the second term of v and thus v = E_h
v <- E_h  %>%
dplyr::rename_with(\(x) str_replace(x, "E_h", "v"),
starts_with("E_h"))
## Calculate Choice Probability
choice_probability <- df %>%
dplyr::bind_cols(v) %>%
dplyr::group_by(i, t) %>%
dplyr::mutate_at(vars(starts_with("v")),
funs(exp(.) / sum(exp(.)))) %>%
dplyr::ungroup() %>%
dplyr::rename_with(\(x) str_replace(x, "v", "choice_probability"),
starts_with("v"))
output <- choice_probability
return(output)
}
## Simulated Log-likelihood
SLL <- function(df, theta, cost_par, lambda){
SLL <- gen_choice_probability(df, theta, cost_par, lambda) %>%
dplyr::mutate_at(vars(starts_with("choice_probability")),
funs(choice * log(.))) %>%
dplyr::summarise_at(vars(starts_with("choice_probability")),
funs(sum(.)))
output <- as.matrix(SLL) %>%
apply(1, mean)
output <- (-1) * output
# print(output)
return(output)
}
# Generate lambda
R <- 50
lambda <- gen_lambda(df, cost_par, R)
## Initial Value
x0 <- rep(1, length(theta))
## Optimization
res <- optim(par = x0,
fn = SLL,
method = "Nelder-Mead",
df = df,
cost_par = cost_par,
lambda = lambda)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, cache = FALSE)
library(bookdown)
library(magrittr)
library(tidyverse)
library(MASS)
#cost_par <- rep(0, 7)
cost_par[1:6] <- theta_lambda
cost_par[7] <- sigma_lambda
cost_par[8:11] <- theta_score
cost_par[12] <- sigma_score
cost_par[13] <- l0
cost_par[14] <- a_l
theta[1:4] <- eta_f
theta[5:6] <- xi
theta[7:9] <- alpha_m0
theta[10:13] <- alpha_m1
theta[14] <- beta
## Generate Lambda
gen_lambda <- function(df, cost_par, R){
# Parameters
theta_lambda <- cost_par[1:6]
sigma_lambda <- cost_par[7]
# Generate mu_lambda
output <- df %>%
dplyr::mutate(mu_lambda = theta_lambda[1]
+ theta_lambda[2]*x_1 + theta_lambda[3]*x_2
+ theta_lambda[4]*x_3 + theta_lambda[5]*x_4
+ theta_lambda[6]*ifelse(m == 1 & t == 0, 1, 0))
# Generate epsilon_lambda (draw R times)
epsilon_lambda <- matrix(rnorm(N * R, 0, sigma_lambda), nrow = N)
colnames(epsilon_lambda) <- c(paste("lambda", 1:R, sep = "_"))
epsilon_lambda <- data.frame(expand_grid(i = 1:N), epsilon_lambda) %>%
tibble::as_tibble()
## lambda
output <- output %>%
dplyr::left_join(epsilon_lambda, by = c("i")) %>%
dplyr::mutate_at(.vars = vars(starts_with("lambda")),
.funs = ~ exp(mu_lambda + .)) %>%
dplyr::select(-mu_lambda)
return(output)
}
# Generate Choice Probability
gen_choice_probability <- function(df, theta, cost_par, lambda){
# Parameters
eta_f <- theta[1:4]
xi <- theta[5:6]
alpha_m0 <- theta[7:9]
alpha_m1 <- theta[10:13]
beta <- theta[14]
# Cost Parameters
theta_score <- cost_par[8:11]
sigma_score <- cost_par[12]
l0 <- cost_par[13]
a_l <- cost_par[14]
## Lambda
lambda <- lambda
# Price
price <- df$price * matrix(rep(1, dim(df)[1] * R), nrow = dim(df)[1])
colnames(price) <- c(paste("price", 1:R, sep = "_"))
price <- data.frame(price) %>%
tibble::as_tibble()
# Generate Demand Friction
demand_friction <- lambda %>%
dplyr::mutate_at(vars(starts_with("lambda")),
funs(ifelse(d == prior_firm,
0,
eta_f[1] + eta_f[2]*x_1 + eta_f[3]*x_2 + eta_f[4]*x_3)
+ ifelse(d == 1 & t == 0,
xi[1] + xi[2]*log(.),
0))) %>%
dplyr::rename_with(\(x) str_replace(x, "lambda", "demand_friction"),
starts_with("lambda")) %>%
dplyr::select(matches("demand_friction"))
# Generate E_score
E_score <- lambda %>%
dplyr::mutate_at(vars(starts_with("lambda")),
funs(ifelse(t == 0 & m == 1,
exp(theta_score[1] + theta_score[2]*log(.)
+ theta_score[3]*x_1 + theta_score[4]*x_2
+ sigma_score^2 / 2),
0))) %>%
dplyr::rename_with(\(x) str_replace(x, "lambda", "E_score"),
starts_with("lambda"))
# Generate E_oop
E_oop <- lambda %>%
dplyr::mutate_at(vars(starts_with("lambda")),
funs(.*exp(-.)*(l0^(a_l)/(a_l - 1))*policy_limit^(-a_l + 1))) %>%
dplyr::rename_with(\(x) str_replace(x, "lambda", "E_oop"),
starts_with("lambda")) %>%
dplyr::select(matches("E_oop"))
# Generate E_R_s
E_R_s <- E_score %>%
dplyr::mutate_at(vars(starts_with("E_score")),
funs(ifelse(t == 0 & m == 1,
(alpha_m1[1] + alpha_m1[2]*x_1 + alpha_m1[3]*x_2 + alpha_m1[4]*.) / beta,
(alpha_m0[1] + alpha_m0[2]*x_1 + alpha_m0[3]*x_2) / beta))) %>%
dplyr::rename_with(\(x) str_replace(x, "E_score", "E_R_s"),
starts_with("E_score")) %>%
dplyr::select(matches("E_R_s"))
# Generate E_R_C
E_R_C <- lambda %>%
dplyr::mutate_at(vars(starts_with("lambda")),
funs(0.98 * exp(-.) + 1.2 * (1 - exp(-.)))) %>%
dplyr::rename_with(\(x) str_replace(x, "lambda", "E_R_C"),
starts_with("lambda")) %>%
dplyr::select(matches("E_R_C"))
# Calculate E_h
E_h <- - price - demand_friction - E_oop - E_R_s * E_R_C * price
E_h <- E_h %>%
dplyr::rename_with(\(x) str_replace(x, "price", "E_h"),
starts_with("price"))
# Calculate v
## Note that now we ignore the second term of v and thus v = E_h
v <- E_h  %>%
dplyr::rename_with(\(x) str_replace(x, "E_h", "v"),
starts_with("E_h"))
## Calculate Choice Probability
choice_probability <- df %>%
dplyr::bind_cols(v) %>%
dplyr::group_by(i, t) %>%
dplyr::mutate_at(vars(starts_with("v")),
funs(exp(.) / sum(exp(.)))) %>%
dplyr::ungroup() %>%
dplyr::rename_with(\(x) str_replace(x, "v", "choice_probability"),
starts_with("v"))
output <- choice_probability
return(output)
}
## Simulated Log-likelihood
SLL <- function(df, theta, cost_par, lambda){
SLL <- gen_choice_probability(df, theta, cost_par, lambda) %>%
dplyr::mutate_at(vars(starts_with("choice_probability")),
funs(choice * log(.))) %>%
dplyr::summarise_at(vars(starts_with("choice_probability")),
funs(sum(.)))
output <- as.matrix(SLL) %>%
apply(1, mean)
output <- (-1) * output
# print(output)
return(output)
}
rm(cost_par)
cost_par[1:6] <- theta_lambda
cost_par[1:6] <- theta_lambda
rm(cost_par)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, cache = FALSE)
library(bookdown)
library(magrittr)
library(tidyverse)
library(MASS)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, cache = FALSE)
library(bookdown)
library(magrittr)
library(tidyverse)
library(MASS)
rm(list = ls())
N <- 10^3
T <- 1
D <- 4
# set the seed
set.seed(1)
## True Parameters
sigma_lambda <- 0.1
theta_lambda <- c(-3, -0.5, 1, -1, 1, -0.5)
## Covariates
mu_x_t0 <- rep(0, 4)
mu_x_t1 <- rep(0, 4)
sigma_x <- diag(0.25, 4)
X_t0 <- mvrnorm(N, mu_x_t0, sigma_x)
X_t1 <- 0.5*X_t0 + 0.5*mvrnorm(N, mu_x_t1, sigma_x)
X <- X_t0 %>%
rbind(X_t0) %>%
rbind(X_t1) %>%
rbind(X_t1)
colnames(X) <- c(paste("x", 1:4, sep = "_"))
X_lambda <- expand.grid(i = 1:N, m = 0:1, t = 0:1) %>%
tibble::as_tibble() %>%
cbind(X)
## mu_lambda
mu_lambda <- X_lambda %>%
dplyr::mutate(mu_lambda = theta_lambda[1]
+ theta_lambda[2]*x_1 + theta_lambda[3]*x_2
+ theta_lambda[4]*x_3 + theta_lambda[5]*x_4
+ theta_lambda[6]*ifelse(m == 1 & t == 0, 1, 0))
## epsilon_lambda
epsilon_lambda <- expand.grid(i = 1:N) %>%
tibble::as_tibble() %>%
dplyr::mutate(epsilon_lambda = rnorm(N, 0, sigma_lambda))
## lambda
lambda <- mu_lambda %>%
dplyr::left_join(epsilon_lambda, by = c("i")) %>%
dplyr::mutate(lambda = exp(mu_lambda + epsilon_lambda))
## Claims Count
cost_t0 <- choice_t0 %>%
dplyr::filter(choice == 1) %>%
dplyr::mutate(claims = rpois(N, lambda = lambda))
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, cache = TRUE)
library(bookdown)
library(magrittr)
library(tidyverse)
library(MASS)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, cache = TRUE)
library(bookdown)
library(magrittr)
library(tidyverse)
library(MASS)
version
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, cache = TRUE,
root.dir = rprojroot::find_rstudio_root_file())
library(bookdown)
library(magrittr)
library(tidyverse)
library(MASS)
library(xtable)
library(AER)
library(Hmisc, stargazer)
library(stargazer)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, cache = TRUE,
root.dir = rprojroot::find_rstudio_root_file())
library(bookdown)
library(magrittr)
library(tidyverse)
library(MASS)
library(xtable)
library(AER)
library(Hmisc, stargazer)
library(stargazer)
rm(list = ls())
## Airline Data
dataframe.airline <- read.csv("Data/Main/dataframe_airline.csv",
header = T, fileEncoding = "shift-JIS")
setwd("/Users/kayabayuki/Individual/001_University/01_PhD_program/04_Thesis/06.Master_thesis_update")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, cache = TRUE,
root.dir = rprojroot::find_rstudio_root_file())
library(bookdown)
library(magrittr)
library(tidyverse)
library(MASS)
library(xtable)
library(AER)
library(Hmisc, stargazer)
library(stargazer)
rm(list = ls())
## Airline Data
dataframe.airline <- read.csv("Data/Main/dataframe_airline.csv",
header = T, fileEncoding = "shift-JIS")
getwd()
rm(list = ls())
## Airline Data
dataframe.airline <- read.csv("Data/Main/dataframe_airline.csv",
header = T, fileEncoding = "shift-JIS")
rm(list = ls())
## Airline Data
dataframe.airline <- read.csv("Data/Main/dataframe_airline.csv",
header = T, fileEncoding = "shift-JIS")
setwd("/Users/kayabayuki/Individual/001_University/01_PhD_program/04_Thesis/06.Master_thesis_update")
rm(list = ls())
## Airline Data
dataframe.airline <- read.csv("Data/Main/dataframe_airline.csv",
header = T, fileEncoding = "shift-JIS")
rm(list = ls())
## Airline Data
dataframe.airline <- read.csv("/Data/Main/dataframe_airline.csv",
header = T, fileEncoding = "shift-JIS")
rm(list = ls())
## Airline Data
dataframe.airline <- read.csv("./Data/Main/dataframe_airline.csv",
header = T, fileEncoding = "shift-JIS")
dataframe.airline <- read.csv("Data/Main/dataframe_airline.csv",
header = T, fileEncoding = "shift-JIS")
dataframe.airline <- read.csv("Data/Main/dataframe_airline.csv",
header = T, fileEncoding = "shift-JIS")
