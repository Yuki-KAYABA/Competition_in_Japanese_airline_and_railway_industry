## Library
library(magrittr)
library(tidyr)
## Read data
airline <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/airline.csv", header = T)
ODforairline <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/ODforairline.csv", header = T)
data <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/data.csv", header = T)
station <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/station.csv", header = T)
airport <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/airport.csv", header = T)
combine <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/combine.csv", header = T)
railway <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/railway.csv", header = T)
railwaycost <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/railwaycost.csv", header = T)
OD <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/OD.csv", header = T, stringsAsFactors = FALSE)
accessibility.station <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/accessibility_station.csv", header = T)
accessibility.airport <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/accessibility_airport.csv", header = T)
OD.207 <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/207OD.csv", header = T)
dataframe.railway <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/dataframe_railway.csv", header = T)
dataframe.airline <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/dataframe_airline.csv", header = T)
## Combine airports
## 余裕あれば直す
for(k in 1:2){
for(i in 1:174){
for(j in 1:8){
if(airline[i, k+1] == combine[j, 1]){
airline[i, k+3] <- combine[j, 3]
} else {
}
}
}
}
## 航空運賃が往復で入っているので片道運賃にする
airline$費用 <- airline$費用/2
## Combine ODs
airline <- airline %>%
dplyr::group_by(空港i, 空港j) %>%
dplyr::mutate(i = min(i),
j = min(j),
freq = 365*sum(航空便数), ## 航空便数は丸める部分に関しては総和で処理する、でここで365倍する
cost = sum(航空便数 * 費用)/sum(航空便数), ## 単純平均から加重平均に差し替えた
duration = sum(航空便数 * 所要時間)/sum(航空便数), ## これも加重平均
stay = max(滞在可能時間), ## これは平均から最大値に変えた
entry = mean(エアライン参入社数)) %>%
dplyr::summarise_each(dplyr::funs(mean),
vars = c('i', 'j', 'duration', 'cost', 'freq', 'stay', 'entry'))
colnames(airline) <- c("空港i", "空港j", "i", "j", "所要時間", "費用", "航空便数", "滞在可能時間", "エアライン参入数")
# Insert airline data into the whole
dataframe.airline <- merge(dataframe.airline, airline, by.x = c("X47ゾーンi", "X47ゾーンj"),
by.y = c("i", "j"), all.x = T)
# Transform 所要時間 and 滞在可能時間 and cost into numeric
railway$所要時間.1 <-as.numeric(as.character(railway$所要時間.1))
railway$滞在可能時間.1 <- as.numeric(as.character(railway$滞在可能時間.1))
railwaycost$cost <- as.numeric(as.character(railwaycost$cost))
## Insert railways duration, stay, and cost data
dataframe.railway <- merge(dataframe.railway, railway, by.x = c("最寄りi", "最寄りj"),
by.y = c("i", "j"), all.x = T)
dataframe.railway <- merge(dataframe.railway, railwaycost, by.x = c("最寄りi", "最寄りj"),
by.y = c("駅i", "駅j"), all.x = T)
## Accessibility
dataframe.airline <- merge(dataframe.airline, accessibility.airport, by.x = c("X207ゾーン名j"),
by.y = "ゾーン", all.x = T)
dataframe.airline <- merge(dataframe.airline, accessibility.airport, by.x = c("X207ゾーン名i"),
by.y = "ゾーン", all.x = T)
dataframe.airline <- dataframe.airline %>%
dplyr::mutate(アクセシビリティ = アクセシビリティ.x + アクセシビリティ.y)
dataframe.railway <- merge(dataframe.railway, accessibility.station, by.x = c("X207ゾーン名j"),
by.y = "ゾーン", all.x = T)
dataframe.railway <- merge(dataframe.railway, accessibility.station, by.x = c("X207ゾーン名i"),
by.y = "ゾーン", all.x = T)
dataframe.railway <- dataframe.railway %>%
dplyr::mutate(アクセシビリティ = アクセシビリティ.x + アクセシビリティ.y)
### ここたぶんけす===============================
## Insert 1s into 航空便数 if railway dummy is equal to 1, so that ln(航空便数) will be zero when the dummy is 1
for(i in 1:nrow(data)){
if(data[i, 20]==1){
data[i, c(17, 21)] <- c(1, 0)
} else {
}
}
## ここまで==========================================
## OD
dataframe.airline <- merge(dataframe.airline, OD.207, by.x = c("X207ゾーンi", "X207ゾーンj"),
by.y = c("X207ゾーンi", "X207ゾーンj"), all.x = T)
dataframe.railway <- merge(dataframe.railway, OD.207, by.x = c("X207ゾーンi", "X207ゾーンj"),
by.y = c("X207ゾーンi", "X207ゾーンj"), all.x = T)
## Make new variables
dataframe.airline <- dataframe.airline %>%
dplyr::mutate(鉄道ダミー = 0)
dataframe.railway <- dataframe.railway %>%
dplyr::mutate(鉄道ダミー = 1,
航空便数 = 1,
エアライン参入数 = 0)
## Drop variables
dataframe.airline <- dataframe.airline[ , c(7, 8, 1, 2, 5, 6, 3, 4, 13, 14, 15, 16, 20, 31, 17, 24, 30, 29)]
dataframe.railway <- dataframe.railway[, c(7, 8, 1, 2, 9, 10, 3, 4, 30, 35, 50, 31, 38, 49, 51, 43, 48, 47, 34)]
colnames(dataframe.airline) <- c("i", "j", "207ゾーンi", "207ゾーンj", "47ゾーンi", "47ゾーンj",
"207ゾーン名i", "207ゾーン名j", "所要時間", "費用", "航空便数",
"滞在可能時間", "アクセシビリティ", "鉄道ダミー", "エアライン参入数",
"x", "OD1", "OD2")
colnames(dataframe.railway) <- c("i", "j", "207ゾーンi", "207ゾーンj", "47ゾーンi", "47ゾーンj",
"207ゾーン名i", "207ゾーン名j", "所要時間", "費用", "航空便数",
"滞在可能時間", "アクセシビリティ", "鉄道ダミー", "エアライン参入数",
"x", "OD1", "OD2")
## =================================================================================================================
## Add airline data for IV estimation
## This is what I add on Decenber 14
airline.as.IV <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/airline_updated.csv", header = T)
airport.number <- read.csv("C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/airportNo47.csv", header = T)
airline.as.IV <- merge(airline.as.IV, airport.number, by.x = c("空港i"),
by.y = "空港", all.x = T)
airline.as.IV <- merge(airline.as.IV, airport.number, by.x = c("空港j"),
by.y = "空港", all.x = T)
## Drop rows with NA
airline.as.IV <- airline.as.IV[-which(is.na(airline.as.IV$No.x) | is.na(airline.as.IV$No.y)), ]
airline.as.IV <- airline.as.IV %>%
dplyr::group_by()
## Delete commas
airline.as.IV$人キロメートル <- as.numeric(gsub(",", "", airline.as.IV$人キロメートル))
airline.as.IV$座席キロメートル <- as.numeric(gsub(",", "", airline.as.IV$座席キロメートル))
airline.as.IV$貨物 <- as.numeric(gsub(",", "", airline.as.IV$貨物))
airline.as.IV$超過手荷物 <- as.numeric(gsub(",", "", airline.as.IV$超過手荷物))
airline.as.IV$郵便物 <- as.numeric(gsub(",", "", airline.as.IV$郵便物))
airline.as.IV$旅客 <- as.numeric(gsub(",", "", airline.as.IV$旅客))
airline.as.IV$郵便物 <- as.numeric(gsub(",", "", airline.as.IV$郵便物))
airline.as.IV$貨物.1 <- as.numeric(gsub(",", "", airline.as.IV$貨物.1))
airline.as.IV$超過手荷物.1 <- as.numeric(gsub(",", "", airline.as.IV$超過手荷物.1))
airline.as.IV$郵便物.1 <- as.numeric(gsub(",", "", airline.as.IV$郵便物.1))
airline.as.IV$計 <- as.numeric(gsub(",", "", airline.as.IV$計))
airline.as.IV$利用可能.トンキロメートル <- as.numeric(gsub(",", "", airline.as.IV$利用可能.トンキロメートル))
airline.as.IV <- airline.as.IV %>%
dplyr::mutate(一便あたり座席数 = 座席数/運航回数,
一便あたり貨物 = 貨物/運航回数,
一便あたり超過手荷物 = 超過手荷物/運航回数,
路線距離 = 運航キロメートル/運航回数)
airline.as.IV <- airline.as.IV[, c(28:33)]
airline.as.IV <- airline.as.IV %>%
dplyr::group_by(No.x, No.y) %>%
dplyr::summarise_each(dplyr::funs(mean),
vars = c('一便あたり座席数', '一便あたり貨物', '一便あたり超過手荷物', '路線距離'))
colnames(airline.as.IV) <- c("i", "j", "一便あたり座席数", "一便あたり貨物", "一便あたり超過手荷物", "路線距離")
dataframe.airline <- merge(dataframe.airline, airline.as.IV, by.x = c("47ゾーンi", "47ゾーンj"),
by.y = c("i", "j"), all.x = T)
dataframe.airline$一便あたり座席数[which(is.na(dataframe.airline$一便あたり座席数))] <- 0
dataframe.airline$一便あたり貨物[which(is.na(dataframe.airline$一便あたり貨物))] <- 0
dataframe.airline$一便あたり超過手荷物[which(is.na(dataframe.airline$一便あたり超過手荷物))] <- 0
dataframe.airline$路線距離[which(is.na(dataframe.airline$路線距離))] <- 0
colnames(dataframe.railway)[19] <- "路線距離"
dataframe.railway <- dataframe.railway %>%
dplyr::mutate(一便あたり座席数 = 0, 一便あたり貨物 = 0, 一便あたり超過手荷物 = 0)
dataframe.airline <- dataframe.airline[ , c(3:6, 1:2, 7:18, 22, 19:21)]
## ==============================================================================================================
## Combine dataframe
dataframe <- rbind(dataframe.airline, dataframe.railway)
dataframe <- dataframe %>%
dplyr::arrange(i, j)
write.csv(dataframe, "C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/dataframe確認.csv")
## Compute share and outside share
dataframe <- dataframe %>%
dplyr::mutate(prob1 = x/OD1, prob2 = x/OD2) %>%
dplyr::mutate(share1 = ifelse(prob1 == 0, 1e-3, ifelse(prob1 == 1, 1 - 1e-3, prob1)),
share2 = ifelse(prob2 == 0, 1e-3, ifelse(prob2 == 1, 1 - 1e-3, prob2))) %>%
dplyr::group_by(i, j) %>%
dplyr::mutate(out.share2 = 1 - sum(share2)) %>%
dplyr::ungroup()
write.csv(dataframe.airline, "C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/dataframe_airline確認.csv")
write.csv(dataframe.railway, "C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/dataframe_railway確認.csv")
write.csv(dataframe, "C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/dataframe確認.csv")
## If succesful, data for utility analysis is named as demand
demand <- dataframe ## Probably have to revise it! We have to leave share and out.share
demand <- demand %>%
dplyr::mutate(y = log(share1) - log(1 - share1))
## Write csv file
write.csv(demand, "C:/Users/kayab/yuki/大学講義/大学院ゼミ/Data/demand.csv")
## Delete rows including NAs
for(i in nrow(demand):1){
if(is.na(demand[i, 10])){
demand <- demand[-i, ]
} else {
}
}
demand <- demand[-which(is.na(demand$y) | is.na(demand$所要時間) | is.na(demand$費用) | is.na(demand$航空便数) | is.na(demand$滞在可能時間)
| is.na(demand$アクセシビリティ) | is.na(demand$鉄道ダミー) | is.na(demand$エアライン参入数)), ]
## Correlation matrix
cor.mat <- cor(demand[ , c(9, 10, 11, 12, 13, 14, 15)])
cor.mat <- format(round(cor.mat, 3), 3)
xtable::xtable(cor.mat, align = T)
corrplot::corrplot(cor(demand[ , c(9, 10, 11, 12, 13, 14, 15)]))
## Estimate parameters of utility function
logit0.1 <- lm(data = demand, y ~ 費用 + log(航空便数),
na.action = na.omit)
logit0.2 <- lm(data = demand, y ~ 費用 + log(航空便数) + 所要時間,
na.action = na.omit)
logit0.3 <- lm(data = demand, y ~ 費用 + log(航空便数) + 滞在可能時間,
na.action = na.omit)
logit0.4 <- lm(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ,
na.action = na.omit)
logit0.5 <- lm(data = demand, y ~ 費用 + log(航空便数) + 鉄道ダミー,
na.action = na.omit)
logit0.6 <- lm(data = demand, y ~ 費用 + log(航空便数) + エアライン参入数,
na.action = na.omit)
logit_summary <- stargazer::stargazer(logit0.1, logit0.2, logit0.3, logit0.4, logit0.5, logit0.6,
type = "latex", no.space = T, omit.stat=c("f","ser"))
logit1.1 <- lm(data = demand, y ~ 費用 + log(航空便数),
na.action = na.omit)
logit1.2 <- lm(data = demand, y ~ 費用 + log(航空便数) + 所要時間,
na.action = na.omit)
logit1.3 <- lm(data = demand, y ~ 費用 + log(航空便数) + 所要時間 + 滞在可能時間,
na.action = na.omit)
logit1.4 <- lm(data = demand, y ~ 費用 + log(航空便数) + 所要時間 + 滞在可能時間 + アクセシビリティ,
na.action = na.omit)
logit1.5 <- lm(data = demand, y ~ 費用 + log(航空便数) + 所要時間 + 滞在可能時間 + アクセシビリティ + 鉄道ダミー,
na.action = na.omit)
logit1.6 <- lm(data = demand, y ~ 費用 + log(航空便数) + 所要時間 + 滞在可能時間 + アクセシビリティ + 鉄道ダミー + エアライン参入数,
na.action = na.omit)
logit_summary <- stargazer::stargazer(logit1.1, logit1.2, logit1.3, logit1.4, logit1.5, logit1.6,
type = "latex", no.space = T, omit.stat=c("f","ser"))
logit9 <- lm(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ,
na.action = na.omit)
logit10 <- lm(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ + 鉄道ダミー,
na.action = na.omit)
logit11 <- lm(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ + 鉄道ダミー + エアライン参入数,
na.action = na.omit)
logit_summary <- stargazer::stargazer(logit9, logit10, logit11,
type = "latex", no.space = T, omit.stat=c("f","ser"))
## IV Estimation
## IVs are 所要時間, エアライン参入数, 滞在可能時間
IVreg <- AER::ivreg(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ + 鉄道ダミー |
所要時間 + エアライン参入数 + 滞在可能時間 + log(航空便数) + アクセシビリティ + 鉄道ダミー) ## いったん航空便数を365倍で処理
IVreg2 <- AER::ivreg(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ + 鉄道ダミー |
所要時間 + エアライン参入数 + 滞在可能時間 + log(航空便数) + アクセシビリティ + 鉄道ダミー +
路線距離 + 一便あたり座席数 + 一便あたり貨物 + 一便あたり超過手荷物)
IVreg3 <- AER::ivreg(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ + 鉄道ダミー |
所要時間 + エアライン参入数 + 滞在可能時間 + log(航空便数) + アクセシビリティ + 鉄道ダミー +
路線距離 + 一便あたり座席数 + 一便あたり貨物)
IVreg4 <- AER::ivreg(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ + 鉄道ダミー |
所要時間 + エアライン参入数 + 滞在可能時間 + log(航空便数) + アクセシビリティ + 鉄道ダミー +
路線距離 + 一便あたり座席数)
IVreg5 <- AER::ivreg(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ + 鉄道ダミー + 一便あたり座席数 |
所要時間 + エアライン参入数 + 滞在可能時間 + log(航空便数) + アクセシビリティ + 鉄道ダミー +
路線距離 + 一便あたり座席数)
IVreg6 <- AER::ivreg(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ + 鉄道ダミー + 一便あたり座席数 +
一便あたり貨物 | 所要時間 + エアライン参入数 + 滞在可能時間 + log(航空便数) + アクセシビリティ + 鉄道ダミー +
路線距離 + 一便あたり座席数)
IVreg7 <- AER::ivreg(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ + 鉄道ダミー + 一便あたり座席数 + 一便あたり貨物 + 所要時間|
所要時間 + エアライン参入数 + 滞在可能時間 + log(航空便数) + アクセシビリティ + 鉄道ダミー +
路線距離 + 一便あたり座席数 + 一便あたり貨物 + 一便あたり超過手荷物)
logit7.1 <- lm(data = demand, y ~ 費用 + log(航空便数) + アクセシビリティ + 鉄道ダミー + 一便あたり座席数 + + 一便あたり貨物 + 所要時間)
TSLS1 <- lm(data = demand, 費用 ~ 所要時間 + エアライン参入数 + 滞在可能時間 + log(航空便数) + アクセシビリティ + 鉄道ダミー +
路線距離 + 一便あたり座席数 + 一便あたり貨物 + 一便あたり超過手荷物)
data.for.2SLS <- demand
data.for.2SLS$費用 <- TSLS1$fitted.values
TSLS2 <- lm(data = data.for.2SLS, y ~ 費用 + log(航空便数) + アクセシビリティ + 鉄道ダミー + 一便あたり座席数 + 一便あたり貨物 + 所要時間)
summary <- stargazer::stargazer(logit7.1, TSLS2, type = "latex", no.space = T, omit.stat=c("f","ser"),
column.labels = c("OLS", "IV"), )
TSLS2$coefficients
IVreg7$coefficients
logit7.1$coefficients
## Estimation Results
coef_logit <- c(logit10$coefficients)
coef_IV <- c(IVreg$coefficients)
coef_IV2 <- c(IVreg2$coefficients)
coef <- rbind(coef_logit, coef_IV, coef_IV2)
coef <- format(round(coef, 4), 3)
colnames(coef) <- c("intercept", "price", "log(frequency)", "acceessibility", "railwaydummy")
rownames(coef) <- c("OLS", "IV", "IV2")
xx2 <- Hmisc::latex(coef, file = "Estimation_results.tex",
caption = "Estimation Results",
where = "h",
col.just = rep("r", dim(coef)[2]))
## Maximum likelihood estimation with sign restriction
## Write a function
fr <- function(x){
LL <- 0
for(i in 1:nrow(demand)){
X <- x[1] + x[2]*demand$所要時間[i] - (x[3]^2)*demand$費用[i] + (x[4]^2)*log(demand$航空便数[i]) +
x[5]*demand$滞在可能時間[i] + x[6]*demand$アクセシビリティ[i] + x[7]*demand$鉄道ダミー[i] + x[8]*demand$エアライン参入数[i]
Y <- demand$y[i]
LLL <- (Y - X)^2
LL <- LL + LLL
}
return(LL)
}
logit2.0 <- optim(c(rep(0, 8)), fr, method = "BFGS", hessian = TRUE, control = list(fnscale = 1))
par.sign <- logit2.0$par
par.sign[3] <- -(par.sign[3])^2
par.sign[4] <- par.sign[4])^2
par.sign
## Finally we get utility parameters
logitpar <- logit10$coefficients
IVpar <- IVreg$coefficients
IVpar2 <- IVreg2$coefficients
xx
xx2
## Estimation Results
coef_logit <- c(logit10$coefficients)
coef_IV <- c(IVreg$coefficients)
coef_IV2 <- c(IVreg2$coefficients)
coef <- rbind(coef_logit, coef_IV, coef_IV2)
coef <- format(round(coef, 4), 3)
colnames(coef) <- c("intercept", "price", "log(frequency)", "acceessibility", "railwaydummy")
rownames(coef) <- c("OLS", "IV", "IV2")
xx2 <- Hmisc::latex(coef, file = "Estimation_results.tex",
caption = "Estimation Results",
where = "h",
col.just = rep("r", dim(coef)[2]))
## Estimation Results
coef_logit <- c(logit10$coefficients)
coef_IV <- c(IVreg$coefficients)
coef_IV2 <- c(IVreg2$coefficients)
coef <- rbind(coef_logit, coef_IV, coef_IV2)
coef <- format(round(coef, 4), 3)
colnames(coef) <- c("intercept", "price", "log(frequency)", "acceessibility", "railwaydummy")
rownames(coef) <- c("OLS", "IV", "IV2")
xx2 <- Hmisc::latex(coef, file = "Estimation_results.tex",
caption = "Estimation Results",
where = "h",
col.just = rep("r", dim(coef)[2]))
xx2
logit10$coefficients
IVreg$coefficients
IVreg2$coefficients
coef
## Estimation Results
coef_logit <- c(logit10$coefficients)
coef_IV <- c(IVreg$coefficients)
coef_IV2 <- c(IVreg2$coefficients)
coef <- rbind(coef_logit, coef_IV, coef_IV2)
coef <- format(round(coef, 4), 3)
colnames(coef) <- c("intercept", "price", "log(frequency)", "acceessibility", "railwaydummy")
rownames(coef) <- c("OLS", "IV", "IV2")
xx2 <- Hmisc::latex(coef, file = "Estimation_results.tex",
caption = "Estimation Results",
where = "h",
col.just = rep("r", dim(coef)[2]))
## Estimation Results
coef_logit <- c(logit10$coefficients)
coef_IV <- c(IVreg$coefficients)
coef_IV2 <- c(IVreg2$coefficients)
coef <- rbind(coef_logit, coef_IV, coef_IV2)
coef <- format(round(coef, 4), 3)
colnames(coef) <- c("intercept", "price", "log(frequency)", "acceessibility", "railwaydummy")
rownames(coef) <- c("OLS", "IV", "IV2")
xx2 <- Hmisc::latex(coef, file = "Estimation_results2.tex",
caption = "Estimation Results",
where = "h",
col.just = rep("r", dim(coef)[2]))
xx2
